{% extends 'base.html.twig' %}

{% block stylesheets %}

    {{ parent() }}

    <!-- custom -->
    <link rel="stylesheet" href="{{ asset('css/editor/editor.css')}}">


{% endblock %}

{% block body %}

    <section class='container-fluid row main'>

        <div class="row">
            <div class="col s12">
                <ul class="tabs">

                    <li class="tab col s3 active"><a href="#myfilms">My numbers</a></li>
                    <li class="tab col s3 "><a href="#assist">Assist tool</a></li>
                    {% if is_granted('ROLE_ADMIN') %}
                        <li class="tab col s3 "><a href="#validation">Validation tool</a></li>
                    {% endif %}
                    <li class="tab col s3 "><a href="#user">My account</a></li>
                </ul>
            </div>
        </div>

        {% include 'CmsBundle:Editor:Tabs/_myfilms.html.twig' %}
        {% include 'CmsBundle:Editor:Tabs/_assist.html.twig' %}

        {% if is_granted('ROLE_ADMIN') %}
            {% include 'CmsBundle:Editor:Tabs/_validation.html.twig' %}
        {% endif %}

        {% include 'CmsBundle:Editor:Tabs/_user.html.twig' %}

    </section>


{% endblock %}


{% block javascripts %}

    {{ parent() }}

    <script>

        //-- list.js

        var maxPagination = 2;
        var minPagination = 1;
        var pages = 15;

        var options = {
            valueNames: [ 'title', 'film', 'timestamp', 'check' ],
            page: pages,
            pagination: [{
                innerWindow:maxPagination,
                outerWindow:minPagination,
            }],
        };

        var myNumbersList = new List('my-numbers-list', options);


        var optionsHelp = {
            valueNames: [ 'title', 'film', 'timestamp', 'check' ],
            page: pages,
            pagination: [{
                innerWindow:maxPagination,
                outerWindow:minPagination,
            }],
        };

        var myHelpList = new List('my-help-list', optionsHelp);

    </script>

    <script>


        function filtering(item){

            $('.number-item').fadeOut();
            if(item == 'all'){
                $('.number-item').fadeIn();
            }
            else{
                $('.number-'+item).fadeIn();
            }
        }

        $("*[data-filter]").click(function(){

            var item = $(this).data('filter');

            filtering(item);

            console.log(item);
        });

//        function checkCompleteness(item){
//
//            $('.number-item').fadeOut();
//
//            var elements = $(".number-check span[data-complete-"+item+"]");
//
////            forEach(){
////
////            }
//            var completeness = elements.data('complete-'+item);
//            console.log(elements);
//
//            if(completeness = 2){
//                console.log('lhkkjk');
//            }
////            if((element.data('data-complete-'+item+')) = 2)
////            {
////                console.log("oki doki");
////            }
//
////            if(data-complete+"item" = 2)
////            {
////                console.log("ohi doki");
////            }
////            $('.number-'+item).fadeIn();
//
//
//        }

//        $("*[data-check-completeness]").click(function(){
//
//            var item = $(this).data('check-completeness');
//
//            checkCompleteness(item);
//
//        });



        // --
        // -- script for isotype
        // --

        //Order the movies

        {#var $grid = $('.grid').isotope({#}
            {#itemSelector: '.element-item',#}
            {#layoutMode: 'fitRows',#}
            {#getSortData: {#}
                {#title: '.title',#}
                {#released: '.released'#}
            {#}#}
        {#});#}


        {#// bind sort button click#}
        {#$('.sort-items').on( 'click', 'span', function() {#}
            {#var sortValue = $(this).attr('data-sort-value');#}
            {#$grid.isotope({ sortBy: sortValue });#}
        {#});#}

        {#//Filter and order Numbers#}

        {#var $numbers = $('.grid-numbers').isotope({#}
            {#filter: '.number-item',#}
            {#getSortData: {#}
                {#title: '.title',#}
                {#film: '.film',#}
                {#timestamp: '.timestamp',#}
            {#}#}
        {#});#}

        {#//button filter#}
        {#{% for item in myFilms %}#}
        {#$('.film').on('click', '.select{{ item.filmId }}', function(){#}
            {#$numbers.isotope({ filter: '.film{{ item.filmId }}' });#}
            {#console.log("filter movie "+{{ item.filmId }});#}
        {#});#}
        {#{% endfor %}#}

//        $('.film').on('click', '.selectall', function(){
//            $numbers.isotope({ filter: '*' });
//        });

        //sort numbers
//        $('.sort-numbers').on('click', 'span', function(){
//            var sortValue = $(this).attr('data-sort-value');
//            $numbers.isotope({ sortBy: sortValue });
//        });

    </script>

{% endblock %}